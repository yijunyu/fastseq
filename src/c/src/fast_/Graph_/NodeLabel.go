// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Graph_

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type NodeLabel struct {
	_tab flatbuffers.Table
}

func GetRootAsNodeLabel(buf []byte, offset flatbuffers.UOffsetT) *NodeLabel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &NodeLabel{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *NodeLabel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *NodeLabel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *NodeLabel) Node() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *NodeLabel) MutateNode(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *NodeLabel) Label() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func NodeLabelStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func NodeLabelAddNode(builder *flatbuffers.Builder, node int32) {
	builder.PrependInt32Slot(0, node, 0)
}
func NodeLabelAddLabel(builder *flatbuffers.Builder, label flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(label), 0)
}
func NodeLabelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
