// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Graph_

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type SymbolCandidate struct {
	_tab flatbuffers.Table
}

func GetRootAsSymbolCandidate(buf []byte, offset flatbuffers.UOffsetT) *SymbolCandidate {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SymbolCandidate{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *SymbolCandidate) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SymbolCandidate) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *SymbolCandidate) SymbolDummyNode() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SymbolCandidate) MutateSymbolDummyNode(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *SymbolCandidate) SymbolName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *SymbolCandidate) IsCorrect() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *SymbolCandidate) MutateIsCorrect(n bool) bool {
	return rcv._tab.MutateBoolSlot(8, n)
}

func SymbolCandidateStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func SymbolCandidateAddSymbolDummyNode(builder *flatbuffers.Builder, symbolDummyNode int32) {
	builder.PrependInt32Slot(0, symbolDummyNode, 0)
}
func SymbolCandidateAddSymbolName(builder *flatbuffers.Builder, symbolName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(symbolName), 0)
}
func SymbolCandidateAddIsCorrect(builder *flatbuffers.Builder, isCorrect bool) {
	builder.PrependBoolSlot(2, isCorrect, false)
}
func SymbolCandidateEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
