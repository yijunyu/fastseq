// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fast_

import (
	flatbuffers "github.com/google/flatbuffers/go"

	fast___Delta_ "fast_/Delta_"
)

type Delta struct {
	_tab flatbuffers.Table
}

func GetRootAsDelta(buf []byte, offset flatbuffers.UOffsetT) *Delta {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Delta{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Delta) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Delta) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Delta) Src() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Delta) Dst() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Delta) Diff(obj *fast___Delta_.Diff, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *Delta) DiffLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func DeltaStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func DeltaAddSrc(builder *flatbuffers.Builder, src flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(src), 0)
}
func DeltaAddDst(builder *flatbuffers.Builder, dst flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(dst), 0)
}
func DeltaAddDiff(builder *flatbuffers.Builder, diff flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(diff), 0)
}
func DeltaStartDiffVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func DeltaEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
