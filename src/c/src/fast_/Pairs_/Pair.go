// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Pairs_

import (
	flatbuffers "github.com/google/flatbuffers/go"

	fast___Pairs___Pair_ "fast_/Pairs_/Pair_"
)

type Pair struct {
	_tab flatbuffers.Table
}

func GetRootAsPair(buf []byte, offset flatbuffers.UOffsetT) *Pair {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Pair{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Pair) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Pair) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Pair) Left(obj *fast___Pairs___Pair_.Diff) *fast___Pairs___Pair_.Diff {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(fast___Pairs___Pair_.Diff)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Pair) Right(obj *fast___Pairs___Pair_.Diff) *fast___Pairs___Pair_.Diff {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(fast___Pairs___Pair_.Diff)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Pair) Type() CloneType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Pair) MutateType(n CloneType) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

func PairStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func PairAddLeft(builder *flatbuffers.Builder, left flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(left), 0)
}
func PairAddRight(builder *flatbuffers.Builder, right flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(right), 0)
}
func PairAddType(builder *flatbuffers.Builder, type_ int32) {
	builder.PrependInt32Slot(2, type_, 0)
}
func PairEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
