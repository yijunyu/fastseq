// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Log_

import (
	flatbuffers "github.com/google/flatbuffers/go"

	fast_ "fast_"
	fast___Log___Commit_ "fast_/Log_/Commit_"
)

type Commit struct {
	_tab flatbuffers.Table
}

func GetRootAsCommit(buf []byte, offset flatbuffers.UOffsetT) *Commit {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Commit{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Commit) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Commit) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Commit) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Commit) Msg() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Commit) AuthorName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Commit) AuthorEmail() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Commit) AuthorTime() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Commit) MutateAuthorTime(n int64) bool {
	return rcv._tab.MutateInt64Slot(12, n)
}

func (rcv *Commit) CommitterName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Commit) CommitterEmail() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Commit) CommitterTime() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Commit) MutateCommitterTime(n int64) bool {
	return rcv._tab.MutateInt64Slot(18, n)
}

func (rcv *Commit) Diff(obj *fast___Log___Commit_.Diff, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *Commit) DiffLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Commit) Slice(obj *fast_.Slices) *fast_.Slices {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(fast_.Slices)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func CommitStart(builder *flatbuffers.Builder) {
	builder.StartObject(10)
}
func CommitAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func CommitAddMsg(builder *flatbuffers.Builder, msg flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(msg), 0)
}
func CommitAddAuthorName(builder *flatbuffers.Builder, authorName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(authorName), 0)
}
func CommitAddAuthorEmail(builder *flatbuffers.Builder, authorEmail flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(authorEmail), 0)
}
func CommitAddAuthorTime(builder *flatbuffers.Builder, authorTime int64) {
	builder.PrependInt64Slot(4, authorTime, 0)
}
func CommitAddCommitterName(builder *flatbuffers.Builder, committerName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(committerName), 0)
}
func CommitAddCommitterEmail(builder *flatbuffers.Builder, committerEmail flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(committerEmail), 0)
}
func CommitAddCommitterTime(builder *flatbuffers.Builder, committerTime int64) {
	builder.PrependInt64Slot(7, committerTime, 0)
}
func CommitAddDiff(builder *flatbuffers.Builder, diff flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(diff), 0)
}
func CommitStartDiffVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func CommitAddSlice(builder *flatbuffers.Builder, slice flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(slice), 0)
}
func CommitEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
