// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Commit_

import (
	flatbuffers "github.com/google/flatbuffers/go"

	fast___Log___Commit___Diff_ "fast_/Log_/Commit_/Diff_"
)

type Diff struct {
	_tab flatbuffers.Table
}

func GetRootAsDiff(buf []byte, offset flatbuffers.UOffsetT) *Diff {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Diff{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Diff) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Diff) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Diff) A() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Diff) B() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Diff) IsNew() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *Diff) MutateIsNew(n bool) bool {
	return rcv._tab.MutateBoolSlot(8, n)
}

func (rcv *Diff) IsCode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Diff) IndexFrom() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Diff) IndexTo() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Diff) Mode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Diff) Hunk(obj *fast___Log___Commit___Diff_.Hunk, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *Diff) HunkLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func DiffStart(builder *flatbuffers.Builder) {
	builder.StartObject(8)
}
func DiffAddA(builder *flatbuffers.Builder, a flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(a), 0)
}
func DiffAddB(builder *flatbuffers.Builder, b flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(b), 0)
}
func DiffAddIsNew(builder *flatbuffers.Builder, isNew bool) {
	builder.PrependBoolSlot(2, isNew, false)
}
func DiffAddIsCode(builder *flatbuffers.Builder, isCode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(isCode), 0)
}
func DiffAddIndexFrom(builder *flatbuffers.Builder, indexFrom flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(indexFrom), 0)
}
func DiffAddIndexTo(builder *flatbuffers.Builder, indexTo flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(indexTo), 0)
}
func DiffAddMode(builder *flatbuffers.Builder, mode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(mode), 0)
}
func DiffAddHunk(builder *flatbuffers.Builder, hunk flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(hunk), 0)
}
func DiffStartHunkVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func DiffEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
