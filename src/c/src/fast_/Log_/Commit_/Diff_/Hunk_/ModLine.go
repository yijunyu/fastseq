// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Hunk_

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ModLine struct {
	_tab flatbuffers.Table
}

func GetRootAsModLine(buf []byte, offset flatbuffers.UOffsetT) *ModLine {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ModLine{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *ModLine) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ModLine) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ModLine) Line() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ModLine) IsAdd() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *ModLine) MutateIsAdd(n bool) bool {
	return rcv._tab.MutateBoolSlot(6, n)
}

func (rcv *ModLine) IsDel() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *ModLine) MutateIsDel(n bool) bool {
	return rcv._tab.MutateBoolSlot(8, n)
}

func ModLineStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func ModLineAddLine(builder *flatbuffers.Builder, line flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(line), 0)
}
func ModLineAddIsAdd(builder *flatbuffers.Builder, isAdd bool) {
	builder.PrependBoolSlot(1, isAdd, false)
}
func ModLineAddIsDel(builder *flatbuffers.Builder, isDel bool) {
	builder.PrependBoolSlot(2, isDel, false)
}
func ModLineEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
