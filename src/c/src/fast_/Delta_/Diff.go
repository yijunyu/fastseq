// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Delta_

import (
	flatbuffers "github.com/google/flatbuffers/go"

	fast___Delta___Diff_ "fast_/Delta_/Diff_"
)

type Diff struct {
	_tab flatbuffers.Table
}

func GetRootAsDiff(buf []byte, offset flatbuffers.UOffsetT) *Diff {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Diff{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Diff) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Diff) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Diff) Type() DeltaType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Diff) MutateType(n DeltaType) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *Diff) Delta(obj *fast___Delta___Diff_.Anonymous2) *fast___Delta___Diff_.Anonymous2 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(fast___Delta___Diff_.Anonymous2)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func DiffStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func DiffAddType(builder *flatbuffers.Builder, type_ int32) {
	builder.PrependInt32Slot(0, type_, 0)
}
func DiffAddDelta(builder *flatbuffers.Builder, delta flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(delta), 0)
}
func DiffEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
