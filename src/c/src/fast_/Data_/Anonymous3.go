// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Data_

import (
	flatbuffers "github.com/google/flatbuffers/go"

	fast_ "fast_"
)

type Anonymous3 struct {
	_tab flatbuffers.Table
}

func GetRootAsAnonymous3(buf []byte, offset flatbuffers.UOffsetT) *Anonymous3 {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Anonymous3{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Anonymous3) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Anonymous3) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Anonymous3) Element(obj *fast_.Element) *fast_.Element {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(fast_.Element)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Anonymous3) Log(obj *fast_.Log) *fast_.Log {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(fast_.Log)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Anonymous3) Delta(obj *fast_.Delta) *fast_.Delta {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(fast_.Delta)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Anonymous3) Pairs(obj *fast_.Pairs) *fast_.Pairs {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(fast_.Pairs)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Anonymous3) Slices(obj *fast_.Slices) *fast_.Slices {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(fast_.Slices)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Anonymous3) Bugs(obj *fast_.Bugs) *fast_.Bugs {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(fast_.Bugs)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Anonymous3) Graph(obj *fast_.Graph) *fast_.Graph {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(fast_.Graph)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func Anonymous3Start(builder *flatbuffers.Builder) {
	builder.StartObject(7)
}
func Anonymous3AddElement(builder *flatbuffers.Builder, element flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(element), 0)
}
func Anonymous3AddLog(builder *flatbuffers.Builder, log flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(log), 0)
}
func Anonymous3AddDelta(builder *flatbuffers.Builder, delta flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(delta), 0)
}
func Anonymous3AddPairs(builder *flatbuffers.Builder, pairs flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(pairs), 0)
}
func Anonymous3AddSlices(builder *flatbuffers.Builder, slices flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(slices), 0)
}
func Anonymous3AddBugs(builder *flatbuffers.Builder, bugs flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(bugs), 0)
}
func Anonymous3AddGraph(builder *flatbuffers.Builder, graph flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(graph), 0)
}
func Anonymous3End(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
