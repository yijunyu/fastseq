// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fast_

import (
	flatbuffers "github.com/google/flatbuffers/go"

	fast___Element_ "fast_/Element_"
)

type Element struct {
	_tab flatbuffers.Table
}

func GetRootAsElement(buf []byte, offset flatbuffers.UOffsetT) *Element {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Element{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Element) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Element) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Element) Type(obj *fast___Element_.Anonymous0) *fast___Element_.Anonymous0 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(fast___Element_.Anonymous0)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Element) Text() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Element) Pos() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Element) MutatePos(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

func (rcv *Element) Length() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Element) MutateLength(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

func (rcv *Element) Child(obj *Element, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *Element) ChildLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Element) Tail() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Element) Extra(obj *fast___Element_.Anonymous1) *fast___Element_.Anonymous1 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(fast___Element_.Anonymous1)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Element) Line() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Element) MutateLine(n int32) bool {
	return rcv._tab.MutateInt32Slot(18, n)
}

func (rcv *Element) Column() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Element) MutateColumn(n int32) bool {
	return rcv._tab.MutateInt32Slot(20, n)
}

func (rcv *Element) Label() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Element) MutateLabel(n float32) bool {
	return rcv._tab.MutateFloat32Slot(22, n)
}

func (rcv *Element) Change() DiffType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Element) MutateChange(n DiffType) bool {
	return rcv._tab.MutateInt32Slot(24, n)
}

func (rcv *Element) Keep() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *Element) MutateKeep(n bool) bool {
	return rcv._tab.MutateBoolSlot(26, n)
}

func (rcv *Element) Id() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Element) MutateId(n int32) bool {
	return rcv._tab.MutateInt32Slot(28, n)
}

func ElementStart(builder *flatbuffers.Builder) {
	builder.StartObject(13)
}
func ElementAddType(builder *flatbuffers.Builder, type_ flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(type_), 0)
}
func ElementAddText(builder *flatbuffers.Builder, text flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(text), 0)
}
func ElementAddPos(builder *flatbuffers.Builder, pos int32) {
	builder.PrependInt32Slot(2, pos, 0)
}
func ElementAddLength(builder *flatbuffers.Builder, length int32) {
	builder.PrependInt32Slot(3, length, 0)
}
func ElementAddChild(builder *flatbuffers.Builder, child flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(child), 0)
}
func ElementStartChildVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ElementAddTail(builder *flatbuffers.Builder, tail flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(tail), 0)
}
func ElementAddExtra(builder *flatbuffers.Builder, extra flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(extra), 0)
}
func ElementAddLine(builder *flatbuffers.Builder, line int32) {
	builder.PrependInt32Slot(7, line, 0)
}
func ElementAddColumn(builder *flatbuffers.Builder, column int32) {
	builder.PrependInt32Slot(8, column, 0)
}
func ElementAddLabel(builder *flatbuffers.Builder, label float32) {
	builder.PrependFloat32Slot(9, label, 0.0)
}
func ElementAddChange(builder *flatbuffers.Builder, change int32) {
	builder.PrependInt32Slot(10, change, 0)
}
func ElementAddKeep(builder *flatbuffers.Builder, keep bool) {
	builder.PrependBoolSlot(11, keep, false)
}
func ElementAddId(builder *flatbuffers.Builder, id int32) {
	builder.PrependInt32Slot(12, id, 0)
}
func ElementEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
